#!/usr/bin/env php
<?php

use Drupal\Core\Database\Database;
use Drupal\Core\DrupalKernel;
use Drupal\Core\Session\AnonymousUserSession;
use Drupal\Core\Site\Settings;
use Drupal\Core\StreamWrapper\PrivateStream;
use Drupal\Core\StreamWrapper\PublicStream;
use Symfony\Component\Console\Output\StreamOutput;
use Symfony\Component\HttpFoundation\Request;

// echo var_export(__DIR__);
// echo var_export($_SERVER);
// exit(1);

// Locate and include composer's autoload.php; assume we're running from vendor/bin'
$GLOBALS['_composer_autoload_path'] =
  $autoload_path = __DIR__ . '/../../autoload.php';
$cwd = isset($_SERVER['PWD']) && is_dir($_SERVER['PWD']) ? $_SERVER['PWD'] : getcwd();
if (!file_exists($autoload_path)) {
  throw new \Exception("Could not locate autoload.php. cwd is $cwd; __DIR__ is " . __DIR__);
}
$loader = include $autoload_path;
if (!$loader) {
  throw new \Exception("Invalid autoloadfile: $autoload_path. cwd is $cwd; __DIR__ is " . __DIR__);
}

// Set up logger.
class DplLogger {
  protected $output;
  public function __construct() { $this->output = new StreamOutput(fopen('php://stderr', 'w')); }
  public function log($msg, $newline = TRUE) { $this->output->write($msg, $newline); }
  public function notice($msg, $newline = TRUE) { $this->log(' [notice] ' . $msg, $newline); }
  public function warning($msg, $newline = TRUE) { $this->log(' [warning] ' . $msg, $newline); }
  public function error($msg, $newline = TRUE) { $this->log(' [error] ' . $msg, $newline); }
}
global $dpl_logger;
$dpl_logger = new DplLogger();

//$dpl_logger->notice(var_export($_SERVER['argv'], TRUE));

// Determine dpl path, cmd.
$argv0 = $_SERVER['argv'][0];
$pwd_argv0 = $cwd . '/' . $argv0;
//   If prepending pwd points to an executable dpl, use it; else assume $argv0 is already an absolute path.
global $dpl_path;
$dpl_path = is_file($pwd_argv0) && is_executable($pwd_argv0) && str_ends_with($pwd_argv0, '/vendor/bin/dpl') ?
  $pwd_argv0 :
  $argv0;

$dpl_cmd = $_SERVER['argv'][1] ?? 'st';

$root_path = realpath(__DIR__ . '/../../../web');
chdir($root_path);

// Validate index.php is found at the expected location.
$index_path = $root_path . '/index.php';
if (!file_exists($index_path)) {
  echo "ERR: can not find a Drupal install at $index_path\n";
  exit(1);
}

$request = Request::createFromGlobals();
$request->overrideGlobals();

if ($dpl_cmd == 'cr' ) {
  // We no longer clear APC and similar caches as they are useless on CLI.
  // See https://github.com/drush-ops/drush/pull/2450
  //$root  = $this->bootstrapManager->getRoot();
  require_once $root_path . '/core/includes/utility.inc';

  //$request = $this->bootstrapManager->bootstrap()->getRequest();
  DrupalKernel::bootEnvironment();

  $site_path = DrupalKernel::findSitePath($request);
  Settings::initialize($root_path, $site_path, $loader);

  // drupal_rebuild() calls drupal_flush_all_caches() itself, so we don't do it manually.
  drupal_rebuild($loader, $request);
  $dpl_logger->notice('Cache rebuild complete.');
  exit(0);
}

// Validate settings.php is found at the expected location.
$site_path = DrupalKernel::findSitePath($request, TRUE);
$settings_path = "$root_path/$site_path/settings.php";
if (!file_exists($settings_path)) {
  echo "ERR: can not find a settings.php file at $settings_path\n";
  exit(1);
}

$kernel = DrupalKernel::createFromRequest($request, $loader, 'prod', FALSE, $root_path);

// Validate DB connection.
if (!class_exists('\PDO')) {
  echo "ERR: PDO support is required.\n";
  exit(1);
}
try {
  $connection = Database::getConnection();
  $connection->open($connection->getConnectionOptions());
} catch (\Exception $e) {
  echo 'ERR: unable to connect to database with message: ' . $e->getMessage() . '. This may occur when Drupalite is trying to bootstrap a site that has not been installed or does not have a configured database.' . "\n";
  exit(1);
}
if (!$connection->schema()->tableExists('key_value')) {
  echo "ERR: key_value table not found. Database may be empty.\n";
  exit(1);
}

$kernel->boot();
$kernel->preHandle($request);
$kernel->getContainer()->get('current_user')->setAccount(new AnonymousUserSession());

$cmd = $_SERVER['argv'];

$db_connection_info = Database::getConnectionInfo()['default'] ?? [];

if ($dpl_cmd === 'st') {
  // Sample output from drush st.
  //Drupal version   : 10.2.3
  //Site URI         : http://local.site.com
  //DB driver        : mysql
  //DB hostname      : mysql
  //DB port          : 3306
  //DB username      : some-db-user
  //DB name          : some-db-name
  //Database         : Connected
  //Drupal bootstrap : Successful
  //Default theme    : some-theme
  //Admin theme      : some-admin-theme
  //PHP binary       : /usr/local/bin/php
  //PHP OS           : Linux
  //PHP version      : 8.2.16
  //Drush script     : /path/to/vendor/bin/drush
  //Drush version    : 12.4.3.0
  //Drush temp       : /tmp
  //Drush configs    : /path/to/vendor/drush/drush/drush.yml
  //Install profile  : standard
  //Drupal root      : /path/to/web
  //Site path        : sites/default
  //Files, Public    : sites/default/files
  //Files, Private   : sites/default/files/private
  //Files, Temp      : /tmp

  $status_table = [
    'Drupal version' => \Drupal::VERSION,
    'Site URI' => 'http://default',
    'DB driver' => $db_connection_info['driver'] ?? '',
    'DB hostname' => $db_connection_info['host'] ?? '',
    'DB port' => $db_connection_info['port'] ?? '',
    'DB username' => $db_connection_info['username'] ?? '',
    'DB name' => $db_connection_info['database'] ?? '',
    'Database' => 'Connected', // Depends on the try/catch for DB check, above.
    'Drupal bootstrap' => 'Successful', // Depends on successfully running DrupalKernel::boot(), ::preHandle().
    'Default theme' => \Drupal::config('system.theme')->get('default'),
    'Admin theme' => \Drupal::config('system.theme')->get('admin') ?: 'seven',
    'PHP binary' => PHP_BINARY,
    'PHP OS' => PHP_OS,
    'PHP version' => PHP_VERSION,
    'Dpl script' => $dpl_path,
    'Install profile' => \Drupal::installProfile(),
    'Drupal root' => realpath($root_path),
    'Site path' => $site_path,
    'Files, Public' => PublicStream::basePath(),
    'Files, Private' => PrivateStream::basePath(),
    'Files, Temp' => \Drupal::service('file_system')->getTempDirectory(),
  ];

  echo json_encode($status_table, JSON_PRETTY_PRINT);
}
elseif ($dpl_cmd == 'updb') {
  require_once __DIR__ . '/updb.inc';
  dpl_updb_prepare($root_path);
}
elseif ($dpl_cmd == 'updb-batch') {
  //echo print_r("At: " . __FUNCTION__);
  require_once $root_path . '/core/includes/batch.inc';
  require_once __DIR__ . '/batch.inc';
  require_once __DIR__ . '/updb.inc';
  $batch_id = $_SERVER['argv'][2];
  //print_r($batch_id);
  //echo json_encode(['drush_batch_process_finished' => TRUE]);
  echo json_encode(_drush_batch_command($batch_id));
}

/**
 * Get the PHP memory_limit value in bytes.
 */
function dpl_memory_limit() {
  $value = trim(ini_get('memory_limit'));
  $last = strtolower($value[strlen($value)-1]);
  $size = (int) rtrim($value, 'GgMmKk');
  switch ($last) {
    case 'g':
      $size *= 1024;
    case 'm':
      $size *= 1024;
    case 'k':
      $size *= 1024;
  }

  return $size;
}
exit(0);
